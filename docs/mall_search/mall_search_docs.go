// Code generated by swaggo/swag. DO NOT EDIT.

package mall_search

import "github.com/swaggo/swag"

const docTemplatemall_search = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/product/importAll": {
            "post": {
                "security": [
                    {
                        "GinJWTMiddleware": []
                    }
                ],
                "description": "将数据库中的商品信息导入到 es",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "搜索商品管理"
                ],
                "summary": "将数据库中的商品信息导入到 es",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin_common.GinCommonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "gin_common.GinCommonResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "http 状态码",
                    "type": "integer"
                },
                "data": {
                    "description": "返回的数据是任意类型\t如果有错误，则把错误信息也封装在此\n\n\t\t{\n\t\t\t\"err_code\": 300000,\n\t\t\t\"err_msg\": \"用户名已存在\"\n\t\t}"
                },
                "message": {
                    "description": "返回的信息 例如: 操作成功或者操作失败",
                    "type": "string"
                },
                "status": {
                    "description": "success or fail",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "GinJWTMiddleware": {
            "description": "Description for what is this security definition being used",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfomall_search holds exported Swagger Info so clients can modify it
var SwaggerInfomall_search = &swag.Spec{
	Version:          "v1",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "mall-go API",
	Description:      "mall-go API",
	InfoInstanceName: "mall_search",
	SwaggerTemplate:  docTemplatemall_search,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfomall_search.InstanceName(), SwaggerInfomall_search)
}
